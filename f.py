
import streamlit as st
import numpy as np
import matplotlib.pyplot as plt

def run():
    lang = st.session_state.get("language", "en")
    def _(en, vi): return vi if lang == "vi" else en

    st.subheader(_("üß± Column PM Interaction Checker", "üß± Ki·ªÉm tra t∆∞∆°ng t√°c N-M c·ªôt"))

    st.markdown("### " + _("Input Parameters", "Th√¥ng s·ªë ƒë·∫ßu v√†o"))

    # V·∫≠t li·ªáu
    fcd = st.number_input(_("Concrete strength fcd (MPa)", "C∆∞·ªùng ƒë·ªô b√™ t√¥ng fcd (MPa)"), value=17.0)
    fyd = st.number_input(_("Steel yield strength fyd (MPa)", "C∆∞·ªùng ƒë·ªô ch·∫£y th√©p fyd (MPa)"), value=435.0)

    # H√¨nh h·ªçc
    b = st.number_input(_("Width b (mm)", "Chi·ªÅu r·ªông b (mm)"), value=300.0)
    h = st.number_input(_("Height h (mm)", "Chi·ªÅu cao h (mm)"), value=500.0)
    cover = st.number_input(_("Concrete cover (mm)", "L·ªõp b√™ t√¥ng b·∫£o v·ªá (mm)"), value=25.0)

    # Th√©p
    n_bars = st.number_input(_("Total rebars (even, both sides)", "T·ªïng s·ªë th√©p (chia ƒë·ªÅu 2 c·∫°nh)"), value=4, step=2)
    dia = st.selectbox(_("Bar diameter (mm)", "ƒê∆∞·ªùng k√≠nh th√©p (mm)"), [10, 12, 14, 16, 20, 25, 28, 32], index=3)

    # N·ªôi l·ª±c
    Ned = st.number_input(_("Axial force Ned (kN)", "L·ª±c d·ªçc Ned (kN)"), value=800.0)
    Med = st.number_input(_("Bending moment Med (kNm)", "M√¥ men u·ªën Med (kNm)"), value=60.0)

    # T√≠nh to√°n
    Ast = n_bars * (np.pi * dia**2 / 4)
    d = h - cover
    dp = cover
    ecu = 0.0035
    Es = 200000  # MPa
    epyd = fyd / Es

    N_list = []
    M_list = []

    e_list = np.linspace(-ecu, epyd*1.5, 200)

    for eps in e_list:
        # Gi·∫£ s·ª≠ k√©o ·ªü th√©p ƒë√°y, n√©n ·ªü th√©p tr√™n
        c = d * ecu / (ecu + eps) if eps > 0 else h  # tr√°nh chia 0
        c = np.clip(c, 1e-3, h)
        x = c
        z = d - dp
        a = 0.8 * x
        Fc = fcd * a * b
        Fs = Ast * fyd if eps > epyd else Ast * Es * eps
        N = Fc + Fs * -1  # Tr·ª•c N h∆∞·ªõng xu·ªëng
        M = Fc * (d - a/2) * 1e-3 + Fs * z * 1e-3  # kNm

        N_list.append(N / 1e3)  # kN
        M_list.append(M)  # kNm

    st.markdown("### " + _("Interaction Diagram", "Bi·ªÉu ƒë·ªì t∆∞∆°ng t√°c"))

    fig, ax = plt.subplots()
    ax.plot(N_list, M_list, label=_("Interaction Curve", "ƒê∆∞·ªùng t∆∞∆°ng t√°c"))
    ax.plot(Ned, Med, "ro", label=_("Design Point", "ƒêi·ªÉm t·ªï h·ª£p"))
    ax.set_xlabel(_("Axial force N (kN)", "L·ª±c d·ªçc N (kN)"))
    ax.set_ylabel(_("Bending moment M (kNm)", "M√¥ men M (kNm)"))
    ax.set_title(_("N-M Interaction", "T∆∞∆°ng t√°c N-M"))
    ax.grid(True)
    ax.legend()
    st.pyplot(fig)

    # K·∫øt lu·∫≠n
    is_safe = False
    for i in range(len(N_list)):
        if Ned <= N_list[i] and Med <= M_list[i]:
            is_safe = True
            break

    st.markdown("### " + _("Result", "K·∫øt qu·∫£"))
    if is_safe:
        st.success(_("‚úÖ The column is safe under the given loads.", "‚úÖ C·ªôt ƒë·∫°t v·ªõi t·ªï h·ª£p t·∫£i ƒë√£ cho."))
    else:
        st.error(_("‚ùå The column is NOT safe under the given loads.", "‚ùå C·ªôt kh√¥ng ƒë·∫°t v·ªõi t·ªï h·ª£p t·∫£i ƒë√£ cho."))
